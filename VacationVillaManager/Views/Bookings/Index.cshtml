@model IEnumerable<VacationVillaManager.Models.Booking>

@{
    ViewBag.Title = "Index";
}

@Styles.Render("~/Content/BootstrapOverride.css")

<div class="row-fluid">
    <div class="span6">
        <h3 class="houseHead">Active <small>Bookings</small></h3>
    </div>
    <div class="span6">
        <a href="@Url.Action("Create")" class="btn btn-large btn-primary pull-right"><i class="icon-plus"></i> New Booking</a>
    </div>
</div>

<table class="table table-hover bookings-table">
    <thead>
        <tr>
            <th>
                <!-- hidden column for date sorting -->
            </th>
            <th>
                Duration
            </th>
            <th>
                Client
            </th>
            <th>
                House
            </th>
            <th>
                Subtotal
            </th>
            <th>
                After Taxes
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>

    @foreach (var item in Model)
    {

        var trClass = "";
        var tip = "";
        if (item.StartDate < System.DateTime.Now && item.EndDate > System.DateTime.Now)
        {
            if (item.PaidInFull == true)
            {
                trClass = "success";
                tip = "<span class='tip green'>Paid in Full</span>";
            }
            else
            {
                trClass = "error";
                tip = "<span class='tip red'>Payment Pending</span>";
            }
            <tr class="@trClass tip_trigger">
                <td>
                    @item.StartDate.ToString("dd MMM yyyy")
                </td>
                <td>
                    @item.StartDate.ToString("dd MMM yyyy") - @item.EndDate.ToString("dd MMM yyyy")
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Client.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.House.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Subtotal)
                </td>
                <td>
                    @{var afterTaxes = Math.Round(item.Subtotal + item.Subtotal * 0.12, 2).ToString("0.00");}
                    @afterTaxes
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.ID }) |
                    @Html.ActionLink("Details", "Details", new { id = item.ID }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.ID })
                    @Html.Raw(tip)
                </td>
            </tr>
        }
    }
    </tbody>
</table>

<div class="row-fluid">
    <div class="span12">
        <h3 class="houseHead">Upcoming <small>Bookings</small><span id="filter" style="padding-left: 50px;"></span></h3>
    </div>
</div>

<table class="table table-hover bookings-table-filter">
    <thead>
        <tr>
            <th>
                <!-- hidden column for date sorting -->
            </th>
            <th>
                Duration
            </th>
            <th>
                Client
            </th>
            <th>
                House
            </th>
            <th>
                Subtotal
            </th>
            <th>
                After Taxes
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>

    @foreach (var item in Model)
    {
        var trClass = "";
        var tip = "";
        if (item.StartDate > System.DateTime.Now)
        {
            if (item.PaidInFull == true)
            {
                trClass = "success";
                tip = "<span class='tip green'>Paid in Full</span>";
            }
            else
            {
                var diff = (int)(item.StartDate - System.DateTime.Now).TotalDays;

                trClass = "info";
                tip = "<span class='tip blue'>Payment Pending; No Deadlines Approaching</span>";
                
                if (item.Deposit == 0)
                {
                    trClass = "error";
                    tip = "<span class='tip red'>Unpaid Deposit!</span>";
                }

                else if (item.StartDate.AddDays(-63) < System.DateTime.Now && item.PaidInFull == false)
                {
                    if (item.StartDate.AddDays(-56) < System.DateTime.Now)
                    {
                        trClass = "error";
                        tip = "<span class='tip red'>Outstanding Payments, Past Due Date! (" + item.StartDate.AddDays(-56).ToString("dd MMM yyyy") + ")</span>";
                    }
                    else
                    {
                        trClass = "warning";
                        tip = "<span class='tip yellow'>Outstanding Payments, due " + item.StartDate.AddDays(-56).ToString("dd MMM yyyy") + "</span>";
                    }
                }
                
            }
            <tr class="@trClass tip_trigger">
                <td>
                    @item.StartDate.ToString("dd MMM yyyy")
                </td>
                <td>
                    @item.StartDate.ToString("dd MMM yyyy") - @item.EndDate.ToString("dd MMM yyyy")
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Client.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.House.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Subtotal)
                </td>
                <td>
                    @{var afterTaxes = Math.Round(item.Subtotal + item.Subtotal * 0.12, 2).ToString("0.00");}
                    @afterTaxes
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.ID }) |
                    @Html.ActionLink("Details", "Details", new { id = item.ID }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.ID })
                    @Html.Raw(tip)
                </td>
            </tr>
        }
    }
    </tbody>
</table>

<div class="row-fluid">
    <div class="span6">
        <h3 class="houseHead">Past <small>Bookings</small></h3>
    </div>
</div>

<table class="table table-hover bookings-table">
    <thead>
        <tr>
            <th>
                <!-- hidden column for date sorting -->
            </th>
            <th>
                Duration
            </th>
            <th>
                Client
            </th>
            <th>
                House
            </th>
            <th>
                Subtotal
            </th>
            <th>
                After Taxes
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>

    @foreach (var item in Model)
    {
        if (item.EndDate < System.DateTime.Now)
        {
            <tr>
                <td>
                    @item.StartDate.ToString("dd MMM yyyy")
                </td>
                <td>
                    @item.StartDate.ToString("dd MMM yyyy") - @item.EndDate.ToString("dd MMM yyyy")
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Client.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.House.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Subtotal)
                </td>
                <td>
                    @{var afterTaxes = Math.Round(item.Subtotal + item.Subtotal * 0.12, 2).ToString("0.00");}
                    @afterTaxes
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.ID }) |
                    @Html.ActionLink("Details", "Details", new { id = item.ID }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.ID })
                </td>
            </tr>
        }
    }
    </tbody>
</table>

@section Scripts {
    @Scripts.Render("~/Scripts/jquery.dataTables.js")
    @Scripts.Render("~/Scripts/table-selectfilter.js")
    @Scripts.Render("~/bundles/jqueryui")

    <script type="text/javascript">

        $(document).ready(function () {

            $('.bookings-table').dataTable({
                "bPaginate": false,
                "aaSorting": [],
                "sDom": 't',
                "aoColumns" : [
                    { "bVisible": false },
                    { "iDataSort": 0 },
                    null,
                    null,
                    null,
                    null,
                    null
                ]
            });

            var dTable = $('.bookings-table-filter').dataTable({
                "bPaginate": false,
                "aaSorting": [],
                "sDom": 't',
                "aoColumns": [
                    { "bVisible": false },
                    { "iDataSort": 0 },
                    null,
                    null,
                    null,
                    null,
                    null
                ]
            });

            $('#filter').append(fnCreateSelect(dTable.fnGetColumnData(3)));

            $('select').change(function () {
                dTable.fnFilter($(this).val(), 3);
            });

            // Assigning BootStrap CSS classes to the DataTables components
            $.fn.dataTableExt.oStdClasses.sPaging = "btn-group ";
            $.fn.dataTableExt.oStdClasses.sPagePrevDisabled = "btn disabled ";
            $.fn.dataTableExt.oStdClasses.sPageNextDisabled = "btn disabled ";
            $.fn.dataTableExt.oStdClasses.sPagePrevEnabled = "btn ";
            $.fn.dataTableExt.oStdClasses.sPageNextEnabled = "btn ";

            $('th').each(function () {
                if ($(this).text() != '') {
                    $(this).append('<i class="icon-caret-up"></i><i class="icon-caret-down"></i>');
                }
            });

            // Tooltips
            $('.tip_trigger').hover(function () {
                tip = $(this).find('.tip');
                tip.show(); //Show tooltip
            }, function () {
                tip.hide(); //Hide tooltip		  
            }).mousemove(function (e) {
                var mousex = e.pageX + 20; //Get X coodrinates
                var mousey = e.pageY + 20; //Get Y coordinates
                var tipWidth = tip.width(); //Find width of tooltip
                var tipHeight = tip.height(); //Find height of tooltip

                //Distance of element from the right edge of viewport
                var tipVisX = $(window).width() - (mousex + tipWidth);
                //Distance of element from the bottom of viewport
                var tipVisY = $(window).height() - (mousey + tipHeight);

                if (tipVisX < 20) { //If tooltip exceeds the X coordinate of viewport
                    mousex = e.pageX - tipWidth - 20;
                } if (tipVisY < 20) { //If tooltip exceeds the Y coordinate of viewport
                    mousey = e.pageY - tipHeight - 20;
                }
                tip.css({ top: mousey, left: mousex });
            });
        });
    </script>
}