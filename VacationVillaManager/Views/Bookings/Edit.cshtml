@model VacationVillaManager.Models.Booking

@{
    ViewBag.Title = "Edit";
}

@Styles.Render("~/Content/BootstrapOverride.css")

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="row-fluid">
        <div class="span3">
            <h3><a href="@Url.Action("Index")" class="back-button"><i class="icon-circle-arrow-left"></i></a> Edit Booking</h3>
        </div>
        <div class="span9 booking-info alert alert-block alert-info">
            <div class="row-fluid">
                <div class="span4" style="margin-bottom: -8px;">
                    <i class="icon-home icon-large"></i> <strong class="red"> @Html.DisplayFor(model => model.House.Name)</strong>
                </div>
                <div class="span4" style="margin-bottom: -8px;">
                    <i class="icon-usd icon-large"></i> <strong class="red" id="total-cost">0</strong>
                </div>
                <div class="span4" style="margin-bottom: -8px;">
                    <i class="icon-calendar icon-large"></i> <strong class="red"> <a href="#" id="date-editable" class="editable editable-click">@Model.StartDate.ToString("dd MMM yyyy") - @Model.EndDate.ToString("dd MMM yyyy")</a></strong>
                </div>
            </div>
        </div>
    </div>

    @Html.HiddenFor(model => model.ID, new { id = "bookingID" })
    @Html.HiddenFor(model => model.Client.ID)
    @Html.HiddenFor(model => model.Client.Location.ID)
    @Html.HiddenFor(model => model.House.ID)
    @Html.HiddenFor(model => model.StartDate, new { id = "startDate" })
    @Html.HiddenFor(model => model.EndDate, new { id = "endDate" })
    @Html.HiddenFor(model => model.Subtotal, new { id = "subtotal" })
    @Html.HiddenFor(model => model.PaidInFull, new { id = "paidInFull" })
    
    <div class="control-group center">
        <div class="controls">
            <div class="row-fluid">
                <div class="span4 well well-small">
                    <fieldset>
                        <legend>Client Information</legend>
                        @Html.EditorFor(model => model.Client)
                    </fieldset>
                </div>
                <div class="span4 well well-small">
                    <fieldset>
                        <legend>Booking Information</legend>
                        <div id="booking-info">
                            <div class="input-prepend input-append">
                                <span class="add-on"><i class="icon-user"></i></span>
                                @Html.TextBoxFor(model => model.NumAdults, new { @class = "input-mini", placeholder = "Num. of" })
                                <span class="add-on" style="padding-left: 12px; padding-right: 12px;">Adult(s)</span>
                            </div><br />
                            <div class="input-prepend input-append">
                                <span class="add-on"><i class="icon-user"></i></span>
                                @Html.TextBoxFor(model => model.NumChildren, new { @class = "input-mini", placeholder = "Num. of" })
                                <span class="add-on">Child(ren)</span>
                            </div><br />
                            <hr style="border-bottom: 1px solid #e5e5e5; border-top: 0; margin-top: 10px;" />
                            <div class="input-prepend input-append">
                                <span class="add-on"><i class="icon-usd"></i></span>
                                @Html.TextBoxFor(model => model.Rate, new { id = "rateBox", @class = "input-mini", placeholder = "Rate" })
                                <span class="add-on">Per Day</span>
                            </div>
                            <div class="costEditor">
                                <!-- Generated cost editors go here -->
                            </div>
                        </div>
                    </fieldset>
                </div>
                <div class="span4 well well-small">
                    <fieldset>
                        <legend>Other</legend>
                        <div class="input-prepend input-append">
                            <span class="add-on" style="padding-left: 19px; padding-right: 20px;">Deposit</span>
                            <span class="add-on"><i class="icon-usd"></i></span>
                            @Html.TextBoxFor(model => model.Deposit, new { id = "deposit", placeholder = "Deposit", @class = "input-mini" })
                            <span id="deposit-date" class="add-on">due at time of booking</span>
                        </div>
                        <div class="input-prepend input-append">
                            <span class="add-on">Outstanding</span>
                            <span class="add-on"><i class="icon-usd"></i></span>
                            @Html.TextBox("Unpaid", Math.Round(Model.Subtotal + Model.Subtotal * 0.12, 2).ToString("0.00"), new { id = "outstanding", placeholder = "Outstanding", @class = "input-mini", disabled = "disabled" })
                            <span id="outstanding-date" class="add-on">due @Model.StartDate.AddDays(-56).ToString("MM/dd/yyyy")</span>
                        </div>
                        <div class="input-prepend input-append">
                            <span class="add-on">Payment Status</span>
                            <button id="payment-toggle" class="btn btn-danger"><i class="icon-remove"></i> Outstanding</button>
                        </div>
                    </fieldset>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row-fluid">
        <div class="span12 well well-small">
            <div class="row-fluid">
                <div class="offset1">
                    <label for="editBooking" class="btn btn-large btn-primary"><i class="icon-ok"></i>  Save</label>
                    <input type="submit" value="Save" id="editBooking" class="hidden" />
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/themes/base/css")
    @Scripts.Render("~/Scripts/daterangepicker/daterangepicker.js")
    @Styles.Render("~/Scripts/daterangepicker/daterangepicker.css")
    @Scripts.Render("~/Scripts/daterangepicker/moment.js")
    @Scripts.Render("~/Scripts/editable/js/bootstrap-editable.js")
    @Styles.Render("~/Scripts/editable/css/bootstrap-editable.css")

    <script type="text/javascript">
        $(document).ready(function () {

            var id = -1;
            var houseID = $('#housesList').val();
            var bookingID = $('#bookingID').val();
            var start = '@Model.StartDate.ToString("M/dd/yyyy")';
            var end = '@Model.EndDate.ToString("M/dd/yyyy")';

            if ($('#paidInFull').val() == "True") {
                var toAppend = '<i class="icon-ok"></i> Paid in Full';
                $('#payment-toggle').attr('class', 'btn btn-success');
                $('#payment-toggle').text('');
                $('#payment-toggle').append(toAppend);
            }

            $('#date-editable').daterangepicker({
                startDate: start,
                endDate: end
            },
            function (start, end) {
                if (start == null || end == null) {
                    $('#date-editable').text("No dates selected");
                    $('#startDate').val("");
                    $('#endDate').val("");
                    $('#deposit-date').text("due date unknown!");
                    $('#outstanding-date').text("due date unknown!");
                }
                else {
                    $('#date-editable').text(start.format('MMM D, YYYY') + " - " + end.format('MMM D, YYYY'));
                    $('#startDate').val(start.format('DD/MM/YYYY'));
                    $('#endDate').val(end.format('DD/MM/YYYY'));
                    var depDate = moment(start);
                    //$('#deposit-date').text("due " + depDate.subtract('d', 56).format('MM/DD/YYYY'));
                    $('#outstanding-date').text("due " + depDate.subtract('d', 56).format('MM/DD/YYYY'));
                    updateCostTotal();
                }
            });
            
            $('body').on('click', '[id^=freq-toggle-]', function () {
                var label = $(this).find('span');
                var value = $(this).find('input');

                if (value.val() === "false") {
                    value.val("true");
                    label.attr('class', 'label label-success');
                    label.text("Daily");
                }

                else {
                    value.val("false");
                    label.attr('class', 'label label-info');
                    label.text("Once");
                }

                updateCostTotal();
            });

            $.ajax({
                type: "GET",
                url: "/Bookings/GetBookingCosts/" + bookingID,
                success: function ($result) {

                    var currentPos = id;
                    var endPos = id + $result.Costs.length;
                    $.each($result.Costs, function (index, cost) {
                        id++;
                        $.ajax({
                            type: "GET",
                            url: "/Bookings/_CostEditorWithID/" + id,
                            async: false,
                            success: function ($result2) {
                                var toInject = $result2;
                                $('.costEditor').append(toInject);
                                $('.costEditor').find('.costEditorRow:last').slideDown();

                                currentPos++;

                                $('#' + currentPos + ' .costName').val(cost.Name);
                                $('#' + currentPos + ' .costAmount').val(cost.Amount);
                                $('#' + currentPos + ' .costID').val(cost.ID);
                                $('#' + currentPos + ' .freq-id').val(cost.CalculateDaily);

                                if ($('#' + currentPos + ' .freq-id').val() == "true") {
                                    var span = $('#' + currentPos + '').find('.freq-toggle').find('span');
                                    span.attr('class', 'label label-success');
                                    span.text('Daily');
                                }

                                updateCostTotal();

                                if (currentPos >= endPos) {
                                    $('.addNewCost').show();
                                }
                            }
                        });
                    });
                }
            });

            $('#payment-toggle').click(function (e) {
                e.preventDefault();
                if ($('#paidInFull').val().toLowerCase() == "false") {
                    var toAppend = '<i class="icon-ok"></i> Paid in Full';
                    $('#payment-toggle').attr('class', 'btn btn-success');
                    $('#payment-toggle').text('');
                    $('#payment-toggle').append(toAppend);
                    $('#paidInFull').val("true");
                }
                else {
                    var toAppend = '<i class="icon-remove"></i> Outstanding';
                    $('#payment-toggle').attr('class', 'btn btn-danger');
                    $('#payment-toggle').text('');
                    $('#payment-toggle').append(toAppend);
                    $('#paidInFull').val("false");
                }
            });

            $('.addNewCost').click(function () {
                id++;
                $.ajax({
                    type: "GET",
                    url: "/Bookings/_CostEditorWithID/" + id,
                    success: function ($result) {
                        var toInject = $result;
                        $('.costEditor').append(toInject);
                        $('.costEditor').find('.costEditorRow:last').slideDown();
                        $('#' + id + ' .costID').val(0);
                    }
                });
            });

            $('body').on('click', 'a.deleteRow', function () {
                var divId = $(this).parents("div.costEditorRow:first").attr('id');

                $(this).parents("div.costEditorRow:first").slideUp('default', function () {
                    $('#' + divId + ' .costName').val('');
                    $('#' + divId + ' .costAmount').val(0);
                    updateCostTotal();
                });
                return false;
            });

            /*$("a.deleteRow").live("click", function () {
                //$(this).parents("div.costEditorRow:first").remove();
                var divId = $(this).closest('div').attr('id');
                $('#' + divId + ' .costName').val('');
                $('#' + divId + ' .costAmount').val('');
                $(this).parents("div.costEditorRow:first").hide();
                return false;
            });

            $('#housesList').change(function () {

                $('.addNewCost').hide();
                $('.costName').val('');
                $('.costAmount').val('');
                $('div[class="costEditorRow"]').hide();

                var houseID = $('#housesList').val();
                if (houseID != "") {

                    $.ajax({
                        type: "GET",
                        url: "/Bookings/GetRate/" + houseID,
                        success: function ($result) {
                            $('#rateBox').val($result);
                        }
                    });

                    $.ajax({
                        type: "GET",
                        url: "/Bookings/GetCosts/" + houseID,
                        success: function ($result) {

                            var currentPos = id;
                            var endPos = id + $result.Costs.length;
                            $.each($result.Costs, function (index, cost) {
                                id++;
                                $.ajax({
                                    type: "GET",
                                    url: "/Houses/_CostEditorWithID/" + id,
                                    async: false,
                                    success: function ($result2) {
                                        var toInject = $result2;
                                        $('.costEditor').hide().append(toInject).slideDown();

                                        currentPos++;

                                        $('#' + currentPos + ' .costName').val(cost.Name);
                                        $('#' + currentPos + ' .costAmount').val(cost.Amount);
                                        $('#' + currentPos + ' .costID').val(0);

                                        if (currentPos >= endPos) {
                                            $('.addNewCost').show();
                                        }
                                    }
                                });
                            });
                        }
                    });
                }
                else {
                    $('#rateBox').val('0');
                }
            });*/

            $('#rateBox').change(function () {
                updateCostTotal();
            });

            $('#deposit').change(function () {
                updateCostTotal();
            });

            $('body').on('change', '.costAmount', function () {
                updateCostTotal();
            });

            function updateCostTotal() {

                var elem = $('#total-cost');

                if ($('#startDate').val() == '' || $('#endDate').val() == '')
                    elem.text('No valid dates selected');

                else {
                    var cost = 0;
                    var start = Date.parse($('#startDate').val());
                    var end = Date.parse($('#endDate').val());

                    // uncomment this line for local testing
                    //var length = Math.round((end - start) / 1000 / 60 / 60 / 24 / 30) + 1;

                    // uncomment this line for deployment testing
                    var length = Math.round((end - start) / 1000 / 60 / 60 / 24);

                    var rate = parseFloat($('#rateBox').val());
                    cost = rate * length;

                    $('.costEditor').children('div .costEditorRow').each(function () {
                        var expense = parseFloat($(this).find('.costAmount').val());
                        var daily = $(this).find('.freq-id').val();

                        if (daily.toLowerCase() === "true")
                            expense = expense * length;

                        cost += expense;
                    });

                    $('#subtotal').val(cost.toFixed(2));

                    var deposit = parseInt($('#deposit').val());
                    var withTaxes = cost + cost * 0.12;
                    var outstanding = (withTaxes - deposit).toFixed(2);
                    $('#outstanding').val(outstanding);
                    elem.text(cost.toFixed(2) + ' (' + withTaxes.toFixed(2) + ')');
                }
            }
        });
    </script>
}
